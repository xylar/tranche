name: Publish Python 🐍 distribution 📦 to PyPI and (optionally) TestPyPI
# Based on https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

on:
  push:
    branches: [ main ]
    # Any semantic-version tag like 0.2.1 or 1.0.0rc1 will trigger
    tags: [ '*' ]
  workflow_dispatch:

# Default minimal permissions; jobs escalate only what they need
permissions:
  contents: read

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build & test 📦
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install build & dev deps
        run: |
          python -m pip install --upgrade pip
          # Install project in editable mode with dev extras (includes build, pytest, twine, etc.)
          python -m pip install -e .[dev]
      - name: Run tests (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        run: pytest -q
      - name: Build sdist and wheel
        run: python -m build
      - name: Check distribution metadata
        run: twine check dist/*
      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  publish-to-testpypi:
    name: Publish to TestPyPI
    # Trigger only for pre-release tags (rc, a, b, dev). Final releases (no pre-release marker) skip this.
    # You can also run this manually via workflow_dispatch for ad‑hoc testing without tagging.
    # IMPORTANT: The previous version used contains(github.ref, 'a') etc. but github.ref for a tag
    # looks like 'refs/tags/0.2.2' and the segment 'tags' contains 'a'. That meant EVERY tag was
    # considered a pre-release, so only the TestPyPI job ran. Fix: operate on github.ref_name (the
    # bare tag name) instead of the full ref path.
    # NOTE: GitHub Actions expressions do not provide regex matching, so we still have broad
    # heuristics: any occurrence of 'a', 'b', 'rc', or 'dev' in the tag name marks a pre-release.
    # This aligns with common PEP 440 segments (aN, bN, rcN, devN). If you ever introduce tags that
    # legitimately contain these letters but are final (rare), refine further via a custom action.
    if: |
      (startsWith(github.ref, 'refs/tags/') && (contains(github.ref_name, 'rc') || contains(github.ref_name, 'dev') || contains(github.ref_name, 'a') || contains(github.ref_name, 'b'))) ||
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    needs: [ build ]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/tranche
    permissions:
      id-token: write  # for OIDC trusted publishing
      contents: read
    steps:
      - name: Checkout (for version introspection)
        uses: actions/checkout@v4
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Set up Python (for optional version check/debug)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Verify tag matches version (pre-release)
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          FILE_VERSION=$(python -c "import tranche.version as v; print(v.__version__)")
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) != package version ($FILE_VERSION)" >&2
            exit 1
          fi
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    name: Publish to PyPI
    # Run only on final release tags: tagged versions without pre-release markers.
    # Ensures pre-releases never hit PyPI until promoted by tagging a final version.
  # Final release: tag does NOT contain typical pre-release markers when looking only at the tag name.
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, 'rc') && !contains(github.ref_name, 'dev') && !contains(github.ref_name, 'a') && !contains(github.ref_name, 'b')
    needs: [ build ]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/tranche
    permissions:
      id-token: write  # for OIDC trusted publishing
      contents: read
    steps:
      - name: Checkout (for version verification)
        uses: actions/checkout@v4
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Set up Python (for version verification)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Verify tag matches version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          FILE_VERSION=$(python -c "import tranche.version as v; print(v.__version__)")
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) != package version ($FILE_VERSION)" >&2
            exit 1
          fi
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
